"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * DEFAULT
 * The AUtextInput component
 *
 * @param  {string}  as               - The kind of input, can be either 'input' or 'textarea', default: 'input'
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {boolean} block            - Add the block variation class, optional
 * @param  {string}  status           - Mark this field as either 'valid' or 'invalid', optional
 * @param  {string}  type             - The type of the field, optional, default: text
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUtextInput=function AUtextInput(_ref){var as=_ref.as,dark=_ref.dark,block=_ref.block,status=_ref.status,width=_ref.width,_ref$type=_ref.type,type=_ref$type===void 0?"text":_ref$type,_ref$className=_ref.className,className=_ref$className===void 0?"":_ref$className,attributeOptions=_objectWithoutProperties(_ref,["as","dark","block","status","width","type","className"]);return as==="textarea"?_react.default.createElement("textarea",_extends({className:"au-text-input ".concat(className)+"".concat(block?" au-text-input--block":"")+"".concat(dark?" au-text-input--dark":"")+"".concat(status==="valid"?" au-text-input--valid":"")+"".concat(status==="invalid"?" au-text-input--invalid":"")+"".concat(width?" au-text-input--width-"+width:"")},attributeOptions)):_react.default.createElement("input",_extends({className:"au-text-input ".concat(className)+"".concat(dark?" au-text-input--dark":"")+"".concat(block?" au-text-input--block":"")+"".concat(status==="valid"?" au-text-input--valid":"")+"".concat(status==="invalid"?" au-text-input--invalid":"")+"".concat(width?" au-text-input--width-"+width:""),type:type},attributeOptions))};AUtextInput.propTypes={as:_propTypes.default.oneOf(["input","textarea"]),dark:_propTypes.default.bool,block:_propTypes.default.bool,status:_propTypes.default.oneOf(["valid","invalid"]),className:_propTypes.default.string,width:_propTypes.default.oneOf(["xs","sm","md","lg","xl"])};AUtextInput.defaultProps={as:"input"};var _default=AUtextInput;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJBVXRleHRJbnB1dCIsImFzIiwiZGFyayIsImJsb2NrIiwic3RhdHVzIiwid2lkdGgiLCJ0eXBlIiwiY2xhc3NOYW1lIiwiYXR0cmlidXRlT3B0aW9ucyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9uZU9mIiwiYm9vbCIsInN0cmluZyIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6IjZGQVNBLG9EQUNBLDZEQU1BLDZCLDBpQ0FHQTs7Ozs7Ozs7Ozs7R0FZQSxHQUFNQSxDQUFBQSxXQUFXLENBQUcsUUFBZEEsQ0FBQUEsV0FBYyxVQUFHQyxDQUFBQSxFQUFILE1BQUdBLEVBQUgsQ0FBT0MsSUFBUCxNQUFPQSxJQUFQLENBQWFDLEtBQWIsTUFBYUEsS0FBYixDQUFvQkMsTUFBcEIsTUFBb0JBLE1BQXBCLENBQTRCQyxLQUE1QixNQUE0QkEsS0FBNUIsZ0JBQW1DQyxJQUFuQyxDQUFtQ0EsSUFBbkMsb0JBQTBDLE1BQTFDLCtCQUFrREMsU0FBbEQsQ0FBa0RBLFNBQWxELHlCQUE4RCxFQUE5RCxnQkFBcUVDLGdCQUFyRSxnR0FDbkJQLENBQUFBLEVBQUUsR0FBSyxVQUFQLENBQ0csa0RBQ0EsU0FBUyxDQUNSLHdCQUFrQk0sU0FBbEIsWUFDSUosS0FBSyxDQUFHLHVCQUFILENBQTZCLEVBRHRDLFlBRUlELElBQUksQ0FBRyxzQkFBSCxDQUE0QixFQUZwQyxZQUdJRSxNQUFNLEdBQUssT0FBWCxDQUFxQix1QkFBckIsQ0FBK0MsRUFIbkQsWUFJSUEsTUFBTSxHQUFLLFNBQVgsQ0FBdUIseUJBQXZCLENBQW1ELEVBSnZELFlBS0lDLEtBQUssQ0FBRyx5QkFBMkJBLEtBQTlCLENBQXNDLEVBTC9DLENBRkQsRUFTS0csZ0JBVEwsRUFESCxDQVlHLCtDQUFPLFNBQVMsQ0FDZix3QkFBa0JELFNBQWxCLFlBQ0lMLElBQUksQ0FBRyxzQkFBSCxDQUE0QixFQURwQyxZQUVJQyxLQUFLLENBQUcsdUJBQUgsQ0FBNkIsRUFGdEMsWUFHSUMsTUFBTSxHQUFLLE9BQVgsQ0FBcUIsdUJBQXJCLENBQStDLEVBSG5ELFlBSUlBLE1BQU0sR0FBSyxTQUFYLENBQXVCLHlCQUF2QixDQUFtRCxFQUp2RCxZQUtJQyxLQUFLLENBQUcseUJBQTJCQSxLQUE5QixDQUFzQyxFQUwvQyxDQURELENBUUEsSUFBSSxDQUFHQyxJQVJQLEVBUW1CRSxnQkFSbkIsRUFiZ0IsQ0FBcEIsQ0F5QkFSLFdBQVcsQ0FBQ1MsU0FBWixDQUF3QixDQUN2QlIsRUFBRSxDQUFFUyxtQkFBVUMsS0FBVixDQUFnQixDQUFFLE9BQUYsQ0FBVyxVQUFYLENBQWhCLENBRG1CLENBRXZCVCxJQUFJLENBQUVRLG1CQUFVRSxJQUZPLENBR3ZCVCxLQUFLLENBQUVPLG1CQUFVRSxJQUhNLENBSXZCUixNQUFNLENBQUVNLG1CQUFVQyxLQUFWLENBQWdCLENBQUUsT0FBRixDQUFXLFNBQVgsQ0FBaEIsQ0FKZSxDQUt2QkosU0FBUyxDQUFFRyxtQkFBVUcsTUFMRSxDQU12QlIsS0FBSyxDQUFFSyxtQkFBVUMsS0FBVixDQUFnQixDQUFFLElBQUYsQ0FBUSxJQUFSLENBQWMsSUFBZCxDQUFvQixJQUFwQixDQUEwQixJQUExQixDQUFoQixDQU5nQixDQUF4QixDQVNBWCxXQUFXLENBQUNjLFlBQVosQ0FBMkIsQ0FDMUJiLEVBQUUsQ0FBRSxPQURzQixDQUEzQixDLGFBSWVELFciLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGdvdi5hdS90ZXh0LWlucHV0cyB2Mi4xLjEgKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXG4gKiB0ZXh0LWlucHV0IGZ1bmN0aW9uXG4gKlxuICogVGV4dCBpbnB1dHMgaW5jbHVkZSB0ZXh0IGlucHV0cywgbGFiZWxzLCBoaW50cyBhbmQgdGV4dGFyZWFzLiBUaGV5IGFsbG93IHVzZXJzIHRvIGlucHV0IGRhdGEgaW50byBhIGZpZWxkLlxuICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cblxuLy8gVGhlIGZvbGxvd2luZyBsaW5lIHdpbGwgYmUgcmVwbGFjZWQgYXV0b21hdGljYWxseSB3aXRoIGdlbmVyaWMgaW1wb3J0cyBmb3IgdGhlIEVTNSBwaXBlbGluZS5cbi8vIFlvdSBjYW4gc2FmZWx5IGlnbm9yZSB0aGlzIGJpdCBpZiB5b3UgdXNlIHRoaXMgbW9kdWxlIHdpdGggcGFuY2FrZVxuLy9cbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG5cbi8qKlxuICogREVGQVVMVFxuICogVGhlIEFVdGV4dElucHV0IGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIGFzICAgICAgICAgICAgICAgLSBUaGUga2luZCBvZiBpbnB1dCwgY2FuIGJlIGVpdGhlciAnaW5wdXQnIG9yICd0ZXh0YXJlYScsIGRlZmF1bHQ6ICdpbnB1dCdcbiAqIEBwYXJhbSAge2Jvb2xlYW59IGRhcmsgICAgICAgICAgICAgLSBBZGQgdGhlIGRhcmsgdmFyaWF0aW9uIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7Ym9vbGVhbn0gYmxvY2sgICAgICAgICAgICAtIEFkZCB0aGUgYmxvY2sgdmFyaWF0aW9uIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RhdHVzICAgICAgICAgICAtIE1hcmsgdGhpcyBmaWVsZCBhcyBlaXRoZXIgJ3ZhbGlkJyBvciAnaW52YWxpZCcsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICB0eXBlICAgICAgICAgICAgIC0gVGhlIHR5cGUgb2YgdGhlIGZpZWxkLCBvcHRpb25hbCwgZGVmYXVsdDogdGV4dFxuICogQHBhcmFtICB7c3RyaW5nfSAgY2xhc3NOYW1lICAgICAgICAtIEFuIGFkZGl0aW9uYWwgY2xhc3MsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtvYmplY3R9ICBhdHRyaWJ1dGVPcHRpb25zIC0gQW55IG90aGVyIGF0dHJpYnV0ZSBvcHRpb25zXG4gKi9cbmNvbnN0IEFVdGV4dElucHV0ID0gKHsgYXMsIGRhcmssIGJsb2NrLCBzdGF0dXMsIHdpZHRoLCB0eXBlID0gJ3RleHQnLCBjbGFzc05hbWUgPSAnJywgLi4uYXR0cmlidXRlT3B0aW9ucyB9KSA9PiAoXG5cdGFzID09PSAndGV4dGFyZWEnXG5cdFx0PyA8dGV4dGFyZWFcblx0XHRcdFx0Y2xhc3NOYW1lPXtcblx0XHRcdFx0XHRgYXUtdGV4dC1pbnB1dCAkeyBjbGFzc05hbWUgfWAgK1xuXHRcdFx0XHRcdGAkeyBibG9jayA/ICcgYXUtdGV4dC1pbnB1dC0tYmxvY2snIDogJycgfWAgK1xuXHRcdFx0XHRcdGAkeyBkYXJrID8gJyBhdS10ZXh0LWlucHV0LS1kYXJrJyA6ICcnIH1gICtcblx0XHRcdFx0XHRgJHsgc3RhdHVzID09PSAndmFsaWQnID8gJyBhdS10ZXh0LWlucHV0LS12YWxpZCcgOiAnJyB9YCArXG5cdFx0XHRcdFx0YCR7IHN0YXR1cyA9PT0gJ2ludmFsaWQnID8gJyBhdS10ZXh0LWlucHV0LS1pbnZhbGlkJyA6ICcnIH1gICsgXG5cdFx0XHRcdFx0YCR7IHdpZHRoID8gJyBhdS10ZXh0LWlucHV0LS13aWR0aC0nICsgd2lkdGggOiAnJyB9YFx0XHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcdFx0XHR7IC4uLmF0dHJpYnV0ZU9wdGlvbnMgfSA+XG5cdFx0XHQ8L3RleHRhcmVhPlxuXHRcdDogPGlucHV0IGNsYXNzTmFtZT17XG5cdFx0XHRcdFx0YGF1LXRleHQtaW5wdXQgJHsgY2xhc3NOYW1lIH1gICtcblx0XHRcdFx0XHRgJHsgZGFyayA/ICcgYXUtdGV4dC1pbnB1dC0tZGFyaycgOiAnJyB9YCArXG5cdFx0XHRcdFx0YCR7IGJsb2NrID8gJyBhdS10ZXh0LWlucHV0LS1ibG9jaycgOiAnJyB9YCArXG5cdFx0XHRcdFx0YCR7IHN0YXR1cyA9PT0gJ3ZhbGlkJyA/ICcgYXUtdGV4dC1pbnB1dC0tdmFsaWQnIDogJycgfWAgK1xuXHRcdFx0XHRcdGAkeyBzdGF0dXMgPT09ICdpbnZhbGlkJyA/ICcgYXUtdGV4dC1pbnB1dC0taW52YWxpZCcgOiAnJyB9YCArXG5cdFx0XHRcdFx0YCR7IHdpZHRoID8gJyBhdS10ZXh0LWlucHV0LS13aWR0aC0nICsgd2lkdGggOiAnJyB9YFxuXHRcdFx0XHR9XG5cdFx0XHRcdHR5cGU9eyB0eXBlIH0geyAuLi5hdHRyaWJ1dGVPcHRpb25zIH1cblx0XHRcdC8+XG4pO1xuXG5BVXRleHRJbnB1dC5wcm9wVHlwZXMgPSB7XG5cdGFzOiBQcm9wVHlwZXMub25lT2YoWyAnaW5wdXQnLCAndGV4dGFyZWEnIF0pLFxuXHRkYXJrOiBQcm9wVHlwZXMuYm9vbCxcblx0YmxvY2s6IFByb3BUeXBlcy5ib29sLFxuXHRzdGF0dXM6IFByb3BUeXBlcy5vbmVPZihbICd2YWxpZCcsICdpbnZhbGlkJyBdKSxcblx0Y2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR3aWR0aDogUHJvcFR5cGVzLm9uZU9mKFsgJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJyBdKVxufTtcblxuQVV0ZXh0SW5wdXQuZGVmYXVsdFByb3BzID0ge1xuXHRhczogJ2lucHV0Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFVdGV4dElucHV0O1xuIl19